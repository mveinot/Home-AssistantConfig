substitutions:
  disp_name: Outside Monitor

esphome:
  name: outside-monitor
  friendly_name: ${disp_name}

esp32:
  board: esp32dev
  framework:
    type: esp-idf

# Enable logging
logger:

web_server:
  js_url: https://oi.esphome.io/v3/www.js
  version: 3
  port: 80

# Enable Home Assistant API
api:
  encryption:
    key: "XcMf3zvOJZI4SArDRJf+DFIIpN1i9UzoeopVMpA8cpM="

ota:
  - platform: esphome
    password: "76d9e933a53301e4266262a6bfec8eb0"

wifi:
  ssid: !secret wifi_ssid
  password: !secret wifi_password
  use_address: 192.168.10.205
  #output_power: 10 #8.5-20
  #power_save_mode: LIGHT #HIGH NONE LIGHT
  fast_connect: true

  # Enable fallback hotspot (captive portal) in case wifi connection fails
  #ap:
  #  ssid: "Lightning-Detector"
  #  password: "O6rLI3Ob2i37"

#captive_portal:

spi:
  clk_pin: GPIO18
  mosi_pin: GPIO23
  miso_pin: GPIO19

i2c:
  sda: GPIO21
  scl: GPIO22
  scan: True

as3935_spi:
  cs_pin: GPIO5
  irq_pin:
    number: GPIO15
    mode: INPUT_PULLDOWN
  indoor: False
  noise_level: 2
  spike_rejection: 5      # Default 2
  lightning_threshold: 9
  mask_disturber: False
  div_ratio: 16
  capacitance: 8
  watchdog_threshold: 2
  tune_antenna: False
  calibration: True

sensor:
  - platform: as3935
    lightning_energy:
      name: "Lightning Energy"
    distance:
      name: "Storm Distance"

  - platform: dht
    pin: GPIO17
    model: AM2302
    temperature:
      name: "Temperature"
    humidity:
      name: "Humidity"
    update_interval: 60s

  - platform: uptime
    name: "Uptime Sensor"
    id: uptime_sensor
    entity_category: diagnostic
    internal: True

  - platform: wifi_signal
    name: "WiFi Signal"
    id: wifi_signal_db
    update_interval: 60s
    entity_category: diagnostic
    internal: True

# Reports the WiFi signal strength in %
  - platform: copy
    source_id: wifi_signal_db
    name: "WiFi Strength"
    filters:
      - lambda: return min(max(2 * (x + 100.0), 0.0), 100.0);
    unit_of_measurement: "%"
    entity_category: diagnostic

binary_sensor:
  - platform: as3935
    name: "Storm Alert"
  - platform: status
    name: "Status"
    entity_category: diagnostic

switch:
  - platform: restart
    name: ${disp_name} Restart  

text_sensor:
  - platform: wifi_info
    ip_address:
      name: "IP Address"
      entity_category: diagnostic
    ssid:
      name: "Connected SSID"
      entity_category: diagnostic
    mac_address:
      name: "Mac Address"
      entity_category: diagnostic

  - platform: template
    name: 'Device Last Restart'
    id: device_last_restart
    icon: mdi:clock
    entity_category: diagnostic
    internal: True
#    device_class: timestamp

  #  Creates a sensor of the uptime of the device, in formatted days, hours, minutes and seconds
  - platform: template
    name: "Uptime"
    entity_category: diagnostic
    lambda: |-
      int seconds = static_cast<int>(id(uptime_sensor).state);
      int days = seconds / (24 * 3600);
      seconds = seconds % (24 * 3600);
      int hours = seconds / 3600;
      seconds = seconds % 3600;
      int minutes = seconds / 60;
      seconds = seconds % 60;

      if (days > 3650) {
        return std::string("Starting up");
      }

      std::string result;

      if (days) {
        result = std::to_string(days) + "d " +
                 std::to_string(hours) + "h " +
                 std::to_string(minutes) + "m " +
                 std::to_string(seconds) + "s";
      } else if (hours) {
        result = std::to_string(hours) + "h " +
                 std::to_string(minutes) + "m " +
                 std::to_string(seconds) + "s";
      } else if (minutes) {
        result = std::to_string(minutes) + "m " +
                 std::to_string(seconds) + "s";
      } else {
        result = std::to_string(seconds) + "s";
      }

      return result;
    icon: mdi:clock-start

time:
  - platform: sntp
    id: sntp_time
  # Change sync interval from default 5min to 6 hours
    update_interval: 360min
  # Publish the time the device was last restarted
    on_time_sync:
      then:
        # Update last restart time, but only once.
        - if:
            condition:
              lambda: 'return id(device_last_restart).state == "";'
            then:
              - text_sensor.template.publish:
                  id: device_last_restart
                  state: !lambda 'return id(sntp_time).now().strftime("%a %d %b %Y - %I:%M:%S %p");'
