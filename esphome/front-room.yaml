substitutions:
  disp_name: Living Room

esphome:
  name: living-room
  friendly_name: ${disp_name}

esp8266:
  board: nodemcuv2

# Enable logging
logger:

# Enable Home Assistant API
api:
  encryption:
    key: "IGlzLAZLynaxN6ZVVua+TCGY7zS8GOPXFB8ky1sy3KM="

ota:
  - platform: esphome
    password: "13d4a4efda69e04a145bc6cce4db1dab"

wifi:
  ssid: !secret wifi_ssid
  password: !secret wifi_password
  use_address: 192.168.10.184

  # Enable fallback hotspot (captive portal) in case wifi connection fails
  ap:
    ssid: "Front-Room Fallback Hotspot"
    password: "Iv0ajrorbp2g"

captive_portal:

i2c:
  id: bus_a
  sda: 4
  scl: 5

sensor:
  - platform: aht10
    i2c_id: bus_a
    variant: AHT20
    temperature:
      id: aht_temp
      name: "Temperature"
    humidity:
      id: aht_humid
      name: "Humidity"
    update_interval: 60s

  - platform: ens160_i2c
    i2c_id: bus_a
    eco2:
      name: "eCO2"
    tvoc:
      name: "Total VOC"
    aqi:
      id: front_room_aqi
      name: "AQI"
    update_interval: 60s
    address: 0x53
    compensation:
      temperature: aht_temp
      humidity: aht_humid

  - platform: uptime
    name: "Uptime Sensor"
    id: uptime_sensor
    entity_category: diagnostic
    internal: True

  - platform: wifi_signal
    name: "WiFi Signal"
    id: wifi_signal_db
    update_interval: 60s
    entity_category: diagnostic
    internal: True
  
# Reports the WiFi signal strength in %
  - platform: copy
    source_id: wifi_signal_db
    name: "WiFi Strength"
    filters:
      - lambda: return min(max(2 * (x + 100.0), 0.0), 100.0);
    unit_of_measurement: "%"
    entity_category: diagnostic

binary_sensor:
  - platform: status
    name: "Status"
    entity_category: diagnostic 

switch:
  - platform: restart
    name: ${disp_name} Restart

text_sensor:
  - platform: wifi_info
    ip_address:
      name: "IP Address"
      entity_category: diagnostic
    ssid:
      name: "Connected SSID"
      entity_category: diagnostic
    mac_address:
      name: "Mac Address"
      entity_category: diagnostic

  - platform: template
    name: "ENS160 Air Quality Rating"
    lambda: |-
      switch ( (int) (id(front_room_aqi).state) ) {
        case 1: return {"Excellent"};
        case 2: return {"Good"};
        case 3: return {"Moderate"};
        case 4: return {"Poor"};
        case 5: return {"Unhealthy"};
        default: return {"Not Available"};
      }

  - platform: template
    name: 'Device Last Restart'
    id: device_last_restart
    icon: mdi:clock
    entity_category: diagnostic
    internal: True
#    device_class: timestamp

  #  Creates a sensor of the uptime of the device, in formatted days, hours, minutes and seconds
  - platform: template
    name: "Device Uptime"
    entity_category: diagnostic
    lambda: |-
      int seconds = (id(uptime_sensor).state);
      int days = seconds / (24 * 3600);
      seconds = seconds % (24 * 3600);
      int hours = seconds / 3600;
      seconds = seconds % 3600;
      int minutes = seconds /  60;
      seconds = seconds % 60;
      if ( days > 3650 ) {
        return { "Starting up" };
      } else if ( days ) {
        return { (String(days) +"d " + String(hours) +"h " + String(minutes) +"m "+ String(seconds) +"s").c_str() };
      } else if ( hours ) {
        return { (String(hours) +"h " + String(minutes) +"m "+ String(seconds) +"s").c_str() };
      } else if ( minutes ) {
        return { (String(minutes) +"m "+ String(seconds) +"s").c_str() };
      } else {
        return { (String(seconds) +"s").c_str() };
      }
    icon: mdi:clock-start

time:
  - platform: sntp
    id: sntp_time
  # Change sync interval from default 5min to 6 hours
    update_interval: 360min    
  # Publish the time the device was last restarted
    on_time_sync:
      then:
        # Update last restart time, but only once.
        - if:
            condition:
              lambda: 'return id(device_last_restart).state == "";'
            then:
              - text_sensor.template.publish:
                  id: device_last_restart
                  state: !lambda 'return id(sntp_time).now().strftime("%a %d %b %Y - %I:%M:%S %p");'  