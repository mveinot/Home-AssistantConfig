substitutions:
  disp_name: Geiger Counter

esphome:
  name: geiger-counter
  friendly_name: ${disp_name}

external_components:
  - source: github://TheStaticTurtle/esphome_syslog
    components: [syslog]

esp8266:
  #framework:
  #  version: 3.0.2
  board: nodemcuv2

# Enable logging
logger:

syslog:
  ip_address: "192.168.5.31"
  port: 514

# Enable Home Assistant API
api:
  encryption:
    key: "JKUd1wW4/UVk8zBliUpnp9VQ1jdZiJngtckC51zjoPM="

ota:
  - platform: esphome
    password: "5d1a866076d11bafbc7770070233802d"

wifi:
  ssid: !secret wifi_ssid
  password: !secret wifi_password
  use_address: 192.168.10.204

  # Enable fallback hotspot (captive portal) in case wifi connection fails
  ap:
    ssid: "Geiger-Counter Fallback Hotspot"
    password: "mvVtdkldbxPM"

captive_portal:

font:
  - file: 'arial.ttf'
    id: nuclear24
    size: 24
    
  - file: 'arial.ttf'
    id: nuclear32
    size: 32

globals: 
  - id: radmon_login
    type: std::string
    initial_value: !secret radmon_login
    restore_value: no
 
  - id: radmon_password
    type: std::string
    initial_value: !secret radmon_password
    restore_value: no

http_request:
  verify_ssl: false
  useragent: esphome/device
  timeout: 5s
  id: http

i2c:
  sda: D1
  scl: D2
  frequency: 800kHz
  #scan: true

sensor:
  - platform: pulse_counter
    icon: mdi:radioactive
    id: radioactivity_cpm
    pin: 
      number: 2 # D4
      mode: INPUT_PULLUP 
    name: "Radiation CPM"
    unit_of_measurement: 'CPM'
    count_mode:
      rising_edge: DISABLE
      falling_edge: INCREMENT
    on_raw_value:
      then:
          - http_request.get:
              url: !lambda |-
                return ( (std::string) "http://radmon.org/radmon.php?function=submit&user=" + id(radmon_login) + (std::string) "&password=" + id(radmon_password) + (std::string) "&unit=CPM&value=" + std::to_string(int(x)) ).c_str();
              on_response:
                  then:
                  - lambda: |-
                     if (response->status_code == 200){ 
                        id(radmon_send_error).publish_state(false);
                     }
                     else{
                        id(radmon_send_error).publish_state(true);
                     } 
      
  - platform: copy # Reports raduoactivity in μSv/h
    source_id: radioactivity_cpm
    name: "Radiation"
    unit_of_measurement: 'μSv/h'
    filters:
      - offset: -12.0 # J305ß Geiger Mueller tube background noise 0.2 pulses / sec x 60 sec = 12 CPM (Counts per Minute)
      - multiply: 0.00812037037037 # Factor: 0.00812037037037
      - clamp:
          min_value: 0
  - platform: uptime
    name: "Uptime Sensor"
    id: uptime_sensor
    entity_category: diagnostic
    internal: True

  - platform: wifi_signal
    name: "WiFi Signal"
    id: wifi_signal_db
    update_interval: 60s
    entity_category: diagnostic
    internal: True

# Reports the WiFi signal strength in %
  - platform: copy
    source_id: wifi_signal_db
    name: "WiFi Strength"
    filters:
      - lambda: return min(max(2 * (x + 100.0), 0.0), 100.0);
    unit_of_measurement: "%"
    entity_category: diagnostic

binary_sensor: 
  - platform: template
    name: radmon_send_error
    id: radmon_send_error
    entity_category: diagnostic
    
  - platform: status
    name: "Status"
    entity_category: diagnostic
      
display:
  - platform: ssd1306_i2c
    model: "SSD1306 128x64"
    update_interval: 30s
    reset_pin: D0
    address: 0x3C
    lambda: |-
      it.printf(64, 4, id(nuclear32), TextAlign::TOP_CENTER, "%.1f", id(radioactivity_cpm).state);
      it.printf(64, 36, id(nuclear24), TextAlign::TOP_CENTER, "CPM");
      //it.graph(0,0, id(CPM));

switch:
  - platform: restart
    name: ${disp_name} Restart

text_sensor:
  - platform: wifi_info
    ip_address:
      name: "IP Address"
      entity_category: diagnostic
    ssid:
      name: "Connected SSID"
      entity_category: diagnostic
    mac_address:
      name: "Mac Address"
      entity_category: diagnostic

  - platform: template
    name: 'Device Last Restart'
    id: device_last_restart
    icon: mdi:clock
    entity_category: diagnostic
    internal: True
#    device_class: timestamp

  #  Creates a sensor of the uptime of the device, in formatted days, hours, minutes and seconds
  - platform: template
    name: "Device Uptime"
    entity_category: diagnostic
    lambda: |-
      int seconds = (id(uptime_sensor).state);
      int days = seconds / (24 * 3600);
      seconds = seconds % (24 * 3600);
      int hours = seconds / 3600;
      seconds = seconds % 3600;
      int minutes = seconds /  60;
      seconds = seconds % 60;
      if ( days > 3650 ) {
        return { "Starting up" };
      } else if ( days ) {
        return { (String(days) +"d " + String(hours) +"h " + String(minutes) +"m "+ String(seconds) +"s").c_str() };
      } else if ( hours ) {
        return { (String(hours) +"h " + String(minutes) +"m "+ String(seconds) +"s").c_str() };
      } else if ( minutes ) {
        return { (String(minutes) +"m "+ String(seconds) +"s").c_str() };
      } else {
        return { (String(seconds) +"s").c_str() };
      }
    icon: mdi:clock-start

time:
  - platform: sntp
    id: sntp_time
  # Change sync interval from default 5min to 6 hours
    update_interval: 360min
  # Publish the time the device was last restarted
    on_time_sync:
      then:
        # Update last restart time, but only once.
        - if:
            condition:
              lambda: 'return id(device_last_restart).state == "";'
            then:
              - text_sensor.template.publish:
                  id: device_last_restart
                  state: !lambda 'return id(sntp_time).now().strftime("%a %d %b %Y - %I:%M:%S %p");'