
# Configure a default setup of Home Assistant (frontend, api, etc)
default_config:

recorder:
  db_url: !secret psql_string
  db_retry_wait: 15
  exclude:
    domains:
      - automation
      - updater
    entity_globs:
      - sensor.weather_*
    entities:
      - sun.sun
      - sensor.last_boot
      - sensor.date
    event_types:
      - call_service

influxdb:
  api_version: 1
  username: !secret influx_username
  password: !secret influx_password
  database: !secret influx_database
# Text to speech
tts:
  - platform: google_translate

automation: !include automations.yaml
script: !include scripts.yaml
scene: !include scenes.yaml
mqtt: !include mqtt.yaml
sensor: !include sensor.yaml

utility_meter:
  daily_internet_usage_in:
    unique_id: "f6f3293b-81e9-4427-95ad-ed467f642ee3"
    source: sensor.internet_usage_in
    cycle: daily
  monthly_internet_usage_in:
    unique_id: "692217cc-cb53-4ade-aaf2-a7810c1dd287"
    source: sensor.internet_usage_in
    cycle: monthly
  daily_internet_usage_out:
    unique_id: "f967f73e-cd3e-428d-873e-0f11ce703c7e"
    source: sensor.internet_usage_out
    cycle: daily
  monthly_internet_usage_out:
    unique_id: "00f46f8f-f570-4e3f-a883-7b747d36d47f"
    source: sensor.internet_usage_out
    cycle: monthly

media_player:
  - platform: denon
    host: 192.168.20.123
    name: Denon 3808CI

frontend:
  themes: !include_dir_merge_named themes

http:
  use_x_forwarded_for: true
  trusted_proxies:
    - !secret proxy_ip

input_number:
  wan_traffic_delta_in:
    # snmp counter is 32-bit unsigned int
    min: 0
    max: 18446744073709551615
  wan_traffic_delta_out:
    # snmp counter is 32-bit unsigned int
    min: 0
    max: 18446744073709551615

template:
  - sensor:
    - name: 'Hot Tub Temperature'
      unique_id: hot_tub_temp
      unit_of_measurement: 'Â°C'
      state: "{{ state_attr('climate.hot_tub_heater', 'current_temperature') }}"
      state_class: measurement
      device_class: temperature
    - name: 'Washer Status'
      unique_id: laundry_washer_status
      icon: mdi:washing-machine
      state: >
        {% if states('sensor.washer')|int > 300 %}
           Running
        {% elif states('sensor.washer')|int > 50 %}
           Filling
        {% else %}
           Stopped
        {% endif %}
    - name: 'Dryer Status'
      unique_id: laundry_dryer_status
      icon: mdi:washing-machine
      state: >
        {% if states('sensor.dryer')|int > 50 %}
           Running
        {% elif states('sensor.dryer')|int > 5 %}
           Cooldown
        {% else %}
           Stopped
        {% endif %}
    - name: 'Server Cost'
      unique_id: server_operating_cost
      icon: mdi:cash
      unit_of_measurement: '$'
      state: "{{(((states('sensor.servers_wh')| float(0) * states('sensor.electricity_kwh_unit_price')| float(0))) / 1000) | round(2) }}"
    - name: 'Washer Cost'
      unique_id: washer_operating_cost
      icon: mdi:cash
      unit_of_measurement: '$'
      state: "{{(((states('sensor.washer_wh')| float(0) * states('sensor.electricity_kwh_unit_price')| float(0))) / 1000) | round(2) }}"
    - name: 'Dryer Cost'
      unique_id: dryer_operating_cost
      icon: mdi:cash
      unit_of_measurement: '$'
      state: "{{(((states('sensor.dryer_wh')| float(0) * states('sensor.electricity_kwh_unit_price')| float(0))) / 1000) | round(2) }}"
    - name: 'Hot Water Cost'
      unique_id: hot_water_operating_cost
      icon: mdi:cash
      unit_of_measurement: '$'
      state: "{{(((states('sensor.water_heater_wh')| float(0) * states('sensor.electricity_kwh_unit_price')| float(0))) / 1000) | round(2) }}"
    - name: 'Water Pump Cost'
      unique_id: water_pump_operating_cost
      icon: mdi:cash
      unit_of_measurement: '$'
      state: "{{(((states('sensor.water_pump_wh')| float(0) * states('sensor.electricity_kwh_unit_price')| float(0))) / 1000) | round(2) }}"
    - name: 'Main Heat Pump Cost'
      unique_id: main_heat_pump_operating_cost
      icon: mdi:cash
      unit_of_measurement: '$'
      state: "{{(((states('sensor.heat_pumps_main_wh')| float(0) * states('sensor.electricity_kwh_unit_price')| float(0))) / 1000) | round(2) }}"
    - name: 'Master Bedroom Heat Pump Cost'
      unique_id: mb_heat_pump_operating_cost
      icon: mdi:cash
      unit_of_measurement: '$'
      state: "{{(((states('sensor.heat_pump_mb_wh')| float(0) * states('sensor.electricity_kwh_unit_price')| float(0))) / 1000) | round(2) }}"
    - name: 'Hot Tub Cost'
      unique_id: hot_tub_operating_cost
      icon: mdi:cash
      unit_of_measurement: '$'
      state: "{{(((states('sensor.hot_tub_wh')| float(0) * states('sensor.electricity_kwh_unit_price')| float(0))) / 1000) | round(2) }}"
    - name: 'Range Cost'
      unique_id: range_operating_cost
      icon: mdi:cash
      unit_of_measurement: '$'
      state: "{{(((states('sensor.range_wh')| float(0) * states('sensor.electricity_kwh_unit_price')| float(0))) / 1000) | round(2) }}"
    - name: 'Office Cost'
      unique_id: office_operating_cost
      icon: mdi:cash
      unit_of_measurement: '$'
      state: "{{(((states('sensor.office_wh')| float(0) * states('sensor.electricity_kwh_unit_price')| float(0))) / 1000) | round(2) }}"
    - name: 'Unmetered Devices Cost'
      unique_id: misc_operating_cost
      icon: mdi:cash
      unit_of_measurement: '$'
      state: "{{(((states('sensor.other_total_wh')| float(0) * states('sensor.electricity_kwh_unit_price')| float(0))) / 1000) | round(2) }}"

